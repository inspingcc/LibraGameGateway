package com.insping.libra.sock;import java.io.IOException;import com.insping.Instances;import com.insping.libra.sock.net.codec.LibraDecoder;import com.insping.libra.sock.net.codec.LibraEncoder;import com.insping.libra.sock.net.handler.SockLogicHandler;import com.insping.libra.world.LibraConfig;import com.insping.log.LibraLog;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelOption;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.codec.LengthFieldBasedFrameDecoder;import io.netty.handler.logging.LogLevel;import io.netty.handler.logging.LoggingHandler;public class SockServer implements Instances {    private SockServer() {    }    private static class SingletonHolder {        private static final SockServer instance = new SockServer();    }    public static SockServer getInstance() {        return SingletonHolder.instance;    }    boolean isRunning = false;    EventLoopGroup bossGroup = new NioEventLoopGroup();    EventLoopGroup workerGroup = new NioEventLoopGroup();    public void start() {        // 配置服务端的NIO线程组        ServerBootstrap b = new ServerBootstrap();        try {            b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.SO_BACKLOG, 100).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new ChannelInitializer<SocketChannel>() {                @Override                public void initChannel(SocketChannel ch) throws IOException {                    ch.pipeline().addLast("frameDecoder", new LengthFieldBasedFrameDecoder(3 * 1024, 0, 2));                    ch.pipeline().addLast("protobufDecoder", new LibraDecoder());                    // ch.pipeline().addLast("frameEncoder", new                    // ProtobufVarint32LengthFieldPrepender());                    ch.pipeline().addLast("protobufEncoder", new LibraEncoder());                    ch.pipeline().addLast(new SockLogicHandler());                }            });            // 绑定端口，同步等待成功            b.bind(LibraConfig.SOCKET_IP, LibraConfig.SOCKET_PORT).sync();            LibraLog.info("Socket服务启动完成! ip:" + LibraConfig.SOCKET_IP + " : " + LibraConfig.SOCKET_PORT);            isRunning = true;        } catch (InterruptedException e) {            LibraLog.error("" + e.getMessage());            LibraLog.info("GatewayServer exception shutdown server!");            bossGroup.shutdownGracefully();            workerGroup.shutdownGracefully();            isRunning = false;        }    }    public void shutdown() {        bossGroup.shutdownGracefully();        workerGroup.shutdownGracefully();        isRunning = false;        LibraLog.info("GatewayServer shutdown success!");    }}